{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Ask Question to make Data Driven Decision Making"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Apa yang ingin kita ketahui dari list film di sini?\n",
    "\n",
    "* Film negara mana yang banyak di tonton?\n",
    "* Negara mana yang banyak menonton?\n",
    "* Apa rating yang banyak ditonton?\n",
    "* Apa saja film dengan budget terbesar?\n",
    "* Film apa saja yang paling terkenal?\n",
    "* Bagaimana korelasi/hubungan budget dan pendapatan?\n",
    "* Apakah company memengaruhi pendapatan? Seberapa besar?\n",
    "* Apakah votes memengaruhi pendapatan? Seberapa besar?\n",
    "* Hal apa saja yang memengaruhi pendapatan?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Importing Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2023-04-06T04:32:59.142042Z",
     "iopub.status.busy": "2023-04-06T04:32:59.141750Z",
     "iopub.status.idle": "2023-04-06T04:33:00.202699Z",
     "shell.execute_reply": "2023-04-06T04:33:00.201598Z",
     "shell.execute_reply.started": "2023-04-06T04:32:59.142014Z"
    }
   },
   "outputs": [],
   "source": [
    "#Import libraries\n",
    "\n",
    "#pandas digunakan untuk memanipulasi dan analisis data\n",
    "#seaborn digunakan visualisasi data\n",
    "#matplotlib digunakan untuk menyetel atau mengatur visualisasi data\n",
    "\n",
    "\n",
    "import numpy as np \n",
    "import pandas as pd \n",
    "import seaborn as sns\n",
    "import re\n",
    "from datetime import datetime\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "plt.style.use ('ggplot')\n",
    "from matplotlib import figure\n",
    "\n",
    "%matplotlib inline\n",
    "sns.set()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-06T04:33:00.205576Z",
     "iopub.status.busy": "2023-04-06T04:33:00.204886Z",
     "iopub.status.idle": "2023-04-06T04:33:00.289743Z",
     "shell.execute_reply": "2023-04-06T04:33:00.288592Z",
     "shell.execute_reply.started": "2023-04-06T04:33:00.205537Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>rating</th>\n",
       "      <th>genre</th>\n",
       "      <th>year</th>\n",
       "      <th>released</th>\n",
       "      <th>score</th>\n",
       "      <th>votes</th>\n",
       "      <th>director</th>\n",
       "      <th>writer</th>\n",
       "      <th>star</th>\n",
       "      <th>country</th>\n",
       "      <th>budget</th>\n",
       "      <th>gross</th>\n",
       "      <th>company</th>\n",
       "      <th>runtime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>The Shining</td>\n",
       "      <td>R</td>\n",
       "      <td>Drama</td>\n",
       "      <td>1980</td>\n",
       "      <td>13/06/1980</td>\n",
       "      <td>8.4</td>\n",
       "      <td>927000.0</td>\n",
       "      <td>Stanley Kubrick</td>\n",
       "      <td>Stephen King</td>\n",
       "      <td>Jack Nicholson</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>19000000.0</td>\n",
       "      <td>46998772.0</td>\n",
       "      <td>Warner Bros.</td>\n",
       "      <td>146.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>The Blue Lagoon</td>\n",
       "      <td>R</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>1980</td>\n",
       "      <td>02/07/1980</td>\n",
       "      <td>5.8</td>\n",
       "      <td>65000.0</td>\n",
       "      <td>Randal Kleiser</td>\n",
       "      <td>Henry De Vere Stacpoole</td>\n",
       "      <td>Brooke Shields</td>\n",
       "      <td>United States</td>\n",
       "      <td>4500000.0</td>\n",
       "      <td>58853106.0</td>\n",
       "      <td>Columbia Pictures</td>\n",
       "      <td>104.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Star Wars: Episode V - The Empire Strikes Back</td>\n",
       "      <td>PG</td>\n",
       "      <td>Action</td>\n",
       "      <td>1980</td>\n",
       "      <td>20/06/1980</td>\n",
       "      <td>8.7</td>\n",
       "      <td>1200000.0</td>\n",
       "      <td>Irvin Kershner</td>\n",
       "      <td>Leigh Brackett</td>\n",
       "      <td>Mark Hamill</td>\n",
       "      <td>United States</td>\n",
       "      <td>18000000.0</td>\n",
       "      <td>538375067.0</td>\n",
       "      <td>Lucasfilm</td>\n",
       "      <td>124.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Airplane!</td>\n",
       "      <td>PG</td>\n",
       "      <td>Comedy</td>\n",
       "      <td>1980</td>\n",
       "      <td>02/07/1980</td>\n",
       "      <td>7.7</td>\n",
       "      <td>221000.0</td>\n",
       "      <td>Jim Abrahams</td>\n",
       "      <td>Jim Abrahams</td>\n",
       "      <td>Robert Hays</td>\n",
       "      <td>United States</td>\n",
       "      <td>3500000.0</td>\n",
       "      <td>83453539.0</td>\n",
       "      <td>Paramount Pictures</td>\n",
       "      <td>88.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Caddyshack</td>\n",
       "      <td>R</td>\n",
       "      <td>Comedy</td>\n",
       "      <td>1980</td>\n",
       "      <td>25/07/1980</td>\n",
       "      <td>7.3</td>\n",
       "      <td>108000.0</td>\n",
       "      <td>Harold Ramis</td>\n",
       "      <td>Brian Doyle-Murray</td>\n",
       "      <td>Chevy Chase</td>\n",
       "      <td>United States</td>\n",
       "      <td>6000000.0</td>\n",
       "      <td>39846344.0</td>\n",
       "      <td>Orion Pictures</td>\n",
       "      <td>98.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             name rating      genre  year  \\\n",
       "0                                     The Shining      R      Drama  1980   \n",
       "1                                 The Blue Lagoon      R  Adventure  1980   \n",
       "2  Star Wars: Episode V - The Empire Strikes Back     PG     Action  1980   \n",
       "3                                       Airplane!     PG     Comedy  1980   \n",
       "4                                      Caddyshack      R     Comedy  1980   \n",
       "\n",
       "     released  score      votes         director                   writer  \\\n",
       "0  13/06/1980    8.4   927000.0  Stanley Kubrick             Stephen King   \n",
       "1  02/07/1980    5.8    65000.0   Randal Kleiser  Henry De Vere Stacpoole   \n",
       "2  20/06/1980    8.7  1200000.0   Irvin Kershner           Leigh Brackett   \n",
       "3  02/07/1980    7.7   221000.0     Jim Abrahams             Jim Abrahams   \n",
       "4  25/07/1980    7.3   108000.0     Harold Ramis       Brian Doyle-Murray   \n",
       "\n",
       "             star         country      budget        gross  \\\n",
       "0  Jack Nicholson  United Kingdom  19000000.0   46998772.0   \n",
       "1  Brooke Shields   United States   4500000.0   58853106.0   \n",
       "2     Mark Hamill   United States  18000000.0  538375067.0   \n",
       "3     Robert Hays   United States   3500000.0   83453539.0   \n",
       "4     Chevy Chase   United States   6000000.0   39846344.0   \n",
       "\n",
       "              company  runtime  \n",
       "0        Warner Bros.    146.0  \n",
       "1   Columbia Pictures    104.0  \n",
       "2           Lucasfilm    124.0  \n",
       "3  Paramount Pictures     88.0  \n",
       "4      Orion Pictures     98.0  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(r'D:\\Data Analis\\youtube\\Newmovie.csv')\n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Membaca tipe data**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-06T04:33:00.291895Z",
     "iopub.status.busy": "2023-04-06T04:33:00.291496Z",
     "iopub.status.idle": "2023-04-06T04:33:00.300649Z",
     "shell.execute_reply": "2023-04-06T04:33:00.299419Z",
     "shell.execute_reply.started": "2023-04-06T04:33:00.291856Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "name         object\n",
       "rating       object\n",
       "genre        object\n",
       "year          int64\n",
       "released     object\n",
       "score       float64\n",
       "votes       float64\n",
       "director     object\n",
       "writer       object\n",
       "star         object\n",
       "country      object\n",
       "budget      float64\n",
       "gross       float64\n",
       "company      object\n",
       "runtime     float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The set has:\n",
    "* Numerical columns: Budget, Gross, Runtime, Score and Votes.\n",
    "* Categorical columns: Company, Country, Director, Genre, Name, Rating, Star, Released and Writer.\n",
    "* Integer: Year.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-06T04:33:00.304683Z",
     "iopub.status.busy": "2023-04-06T04:33:00.303928Z",
     "iopub.status.idle": "2023-04-06T04:33:00.318867Z",
     "shell.execute_reply": "2023-04-06T04:33:00.317353Z",
     "shell.execute_reply.started": "2023-04-06T04:33:00.304634Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rating       76\n",
      "score         3\n",
      "votes         3\n",
      "writer        2\n",
      "star          1\n",
      "country       1\n",
      "budget     2130\n",
      "gross       179\n",
      "company      15\n",
      "runtime       2\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "missing_counts = df.isnull().sum()\n",
    "print(missing_counts[missing_counts>0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# **Cleaning Data**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. replace the missing rows in rating, score, votes by mode\n",
    "2. replace the writer, star, and company by unknown \n",
    "3. replace the country by matching with the company\n",
    "4. we can't change the budget and gross so replace them by 0 \n",
    "5. change data types of release become datetime\n",
    "6. drop cuplicate column in name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-06T04:33:00.320977Z",
     "iopub.status.busy": "2023-04-06T04:33:00.320447Z",
     "iopub.status.idle": "2023-04-06T04:33:00.330551Z",
     "shell.execute_reply": "2023-04-06T04:33:00.329395Z",
     "shell.execute_reply.started": "2023-04-06T04:33:00.320941Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "name         object\n",
       "rating       object\n",
       "genre        object\n",
       "year          int64\n",
       "released     object\n",
       "score       float64\n",
       "votes       float64\n",
       "director     object\n",
       "writer       object\n",
       "star         object\n",
       "country      object\n",
       "budget      float64\n",
       "gross       float64\n",
       "company      object\n",
       "runtime     float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Drop Duplicate rows in column name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-06T04:33:00.332887Z",
     "iopub.status.busy": "2023-04-06T04:33:00.331887Z",
     "iopub.status.idle": "2023-04-06T04:33:00.371643Z",
     "shell.execute_reply": "2023-04-06T04:33:00.370464Z",
     "shell.execute_reply.started": "2023-04-06T04:33:00.332851Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The numbers of duplicates is: 1\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>rating</th>\n",
       "      <th>genre</th>\n",
       "      <th>year</th>\n",
       "      <th>released</th>\n",
       "      <th>score</th>\n",
       "      <th>votes</th>\n",
       "      <th>director</th>\n",
       "      <th>writer</th>\n",
       "      <th>star</th>\n",
       "      <th>country</th>\n",
       "      <th>budget</th>\n",
       "      <th>gross</th>\n",
       "      <th>company</th>\n",
       "      <th>runtime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3674</th>\n",
       "      <td>Shaft</td>\n",
       "      <td>R</td>\n",
       "      <td>Action</td>\n",
       "      <td>2000</td>\n",
       "      <td>16/06/2000</td>\n",
       "      <td>6.0</td>\n",
       "      <td>75000.0</td>\n",
       "      <td>John Singleton</td>\n",
       "      <td>Ernest Tidyman</td>\n",
       "      <td>Samuel L. Jackson</td>\n",
       "      <td>Germany</td>\n",
       "      <td>46000000.0</td>\n",
       "      <td>107626125.0</td>\n",
       "      <td>Paramount Pictures</td>\n",
       "      <td>99.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       name rating   genre  year    released  score    votes        director  \\\n",
       "3674  Shaft      R  Action  2000  16/06/2000    6.0  75000.0  John Singleton   \n",
       "\n",
       "              writer               star  country      budget        gross  \\\n",
       "3674  Ernest Tidyman  Samuel L. Jackson  Germany  46000000.0  107626125.0   \n",
       "\n",
       "                 company  runtime  \n",
       "3674  Paramount Pictures     99.0  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#count the duplicate \n",
    "dup = df.duplicated(subset = ['name', 'star'])\n",
    "num_dup = dup.sum()\n",
    "\n",
    "print(f'The numbers of duplicates is: {num_dup}')\n",
    "\n",
    "#showing the duplicate\n",
    "df.sort_values('name', inplace = True)\n",
    "bool_series = df[['name', 'star']].duplicated()\n",
    "df[bool_series]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-06T04:33:00.374774Z",
     "iopub.status.busy": "2023-04-06T04:33:00.372877Z",
     "iopub.status.idle": "2023-04-06T04:33:00.388095Z",
     "shell.execute_reply": "2023-04-06T04:33:00.387031Z",
     "shell.execute_reply.started": "2023-04-06T04:33:00.374734Z"
    }
   },
   "outputs": [],
   "source": [
    "#keep the first diplicate row\n",
    "df.drop_duplicates(subset = ['name', 'star'], inplace = True)\n",
    "df.drop(['name', 'star'], axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Replace missing rows in rating, score, votes by mode"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-06T04:33:00.390001Z",
     "iopub.status.busy": "2023-04-06T04:33:00.389656Z",
     "iopub.status.idle": "2023-04-06T04:33:00.404265Z",
     "shell.execute_reply": "2023-04-06T04:33:00.403189Z",
     "shell.execute_reply.started": "2023-04-06T04:33:00.389966Z"
    }
   },
   "outputs": [],
   "source": [
    "df['rating'] = df['rating'].fillna(df['rating'].mode()[0])\n",
    "\n",
    "df['score'] = df['score'].fillna(df['score'].mode()[0])\n",
    "\n",
    "df['votes'] = df['votes'].fillna(df['votes'].mode()[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Replace the writer, star, and company by unknown"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-06T04:33:00.406964Z",
     "iopub.status.busy": "2023-04-06T04:33:00.405805Z",
     "iopub.status.idle": "2023-04-06T04:33:00.415353Z",
     "shell.execute_reply": "2023-04-06T04:33:00.414256Z",
     "shell.execute_reply.started": "2023-04-06T04:33:00.406920Z"
    }
   },
   "outputs": [],
   "source": [
    "df.fillna({'writer' : 'Unknown', 'star' : 'Unknown', 'company' : 'Unknown'}, inplace = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Replace the country by matching with the company"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-06T04:33:00.421969Z",
     "iopub.status.busy": "2023-04-06T04:33:00.421672Z",
     "iopub.status.idle": "2023-04-06T04:33:00.435464Z",
     "shell.execute_reply": "2023-04-06T04:33:00.434316Z",
     "shell.execute_reply.started": "2023-04-06T04:33:00.421928Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country</th>\n",
       "      <th>company</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7559</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Growing Tree Productions</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     country                   company\n",
       "7559     NaN  Growing Tree Productions"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#check words that maybe we can use for replace the missing value in country\n",
    "mask = (df['country'].isnull())\n",
    "\n",
    "selected_df = df.loc[mask, ['country', 'company']]\n",
    "\n",
    "selected_df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-06T04:33:00.438107Z",
     "iopub.status.busy": "2023-04-06T04:33:00.437338Z",
     "iopub.status.idle": "2023-04-06T04:33:00.460274Z",
     "shell.execute_reply": "2023-04-06T04:33:00.459379Z",
     "shell.execute_reply.started": "2023-04-06T04:33:00.438065Z"
    }
   },
   "outputs": [],
   "source": [
    "# check the Tree and match them with country\n",
    "\n",
    "df['company'] = df['company'].astype('string') \n",
    "\n",
    "mask = df['company'] & df['company'].str.contains('Growing Tree Production', na=False)\n",
    "\n",
    "selected_df = df.loc[mask, ['country', 'company']]\n",
    "\n",
    "selected_df\n",
    "\n",
    "#we not get anything so prefer we drop it\n",
    "\n",
    "df.dropna(subset = ['country'], inplace = True)\n",
    "df.dropna(subset = ['runtime'], inplace = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. change data types of release become datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-06T04:33:00.463429Z",
     "iopub.status.busy": "2023-04-06T04:33:00.463130Z",
     "iopub.status.idle": "2023-04-06T04:33:00.478290Z",
     "shell.execute_reply": "2023-04-06T04:33:00.477213Z",
     "shell.execute_reply.started": "2023-04-06T04:33:00.463404Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/01/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/12/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/03/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/11/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/11/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/03/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/01/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/01/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/09/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/04/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/01/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/06/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/04/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/11/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/03/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/09/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/02/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/11/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/09/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/01/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/03/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/01/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/03/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/06/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/09/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/01/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/04/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/06/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/02/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/06/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/10/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/10/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/02/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/09/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/07/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/09/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/08/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/06/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/08/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/02/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/09/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/08/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/03/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/04/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/04/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/02/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/02/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/04/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/12/1980' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/03/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/02/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/11/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/05/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/11/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/12/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/11/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/07/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/01/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/02/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/09/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/05/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/01/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/09/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/03/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/07/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/07/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/02/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/10/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/05/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/10/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/01/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/06/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/04/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/09/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/04/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/04/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/10/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/06/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/05/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/04/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/01/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/11/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/09/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/08/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/01/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/04/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/05/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/07/1982' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/05/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/01/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/03/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/02/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/11/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/04/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/02/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/08/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/11/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/10/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/11/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/03/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/05/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/10/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/03/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/07/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/03/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/12/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/03/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/09/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/01/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/07/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/07/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/06/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/01/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/09/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/07/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/08/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/01/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/05/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/09/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/04/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/01/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/06/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/03/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/10/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/09/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/09/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/05/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/04/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/03/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/06/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/12/1981' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/04/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/02/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/08/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/02/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/09/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/04/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/02/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/11/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/05/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/10/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/02/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/08/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/05/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/04/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/12/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/09/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/03/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/09/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/08/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/07/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/09/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/04/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/07/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/10/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/11/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/05/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/08/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/10/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/11/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/05/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/05/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/08/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/05/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/11/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/07/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/07/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/02/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/01/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/03/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/11/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/10/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/10/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/09/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/09/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/10/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/01/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/03/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/11/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/09/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/05/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/03/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/12/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/05/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/01/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/02/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/12/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/08/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/1980' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/12/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/12/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/12/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/12/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/12/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/09/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/09/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/07/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/08/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/06/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/09/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/10/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/08/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/11/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/10/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/12/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/09/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/03/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/02/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/08/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/10/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/02/1981' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/10/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/01/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/08/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/08/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/06/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/09/1982' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/04/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/09/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/01/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/02/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/11/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/11/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/08/1981' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/09/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/07/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/08/1981' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/06/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/08/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/08/1982' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/09/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/08/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/11/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/12/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/07/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/08/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/01/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/05/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/08/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/12/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/05/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/12/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/01/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/07/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/09/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/06/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/11/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/01/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/12/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/06/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/12/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/06/1982' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/02/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/10/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/07/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/07/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/07/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/05/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/12/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/12/1980' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/09/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/09/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/06/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/04/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/03/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/10/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/12/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/07/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/09/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/01/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/09/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/02/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/06/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/07/1981' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/08/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/09/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/01/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/12/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/09/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/01/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/06/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/07/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/06/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/10/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/02/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/01/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/06/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/04/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/07/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/05/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/11/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/09/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/07/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/11/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/10/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/12/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/04/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/04/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/11/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/06/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/03/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/07/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/10/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/04/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/10/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/06/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/06/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/04/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/08/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/06/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/03/1981' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/06/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/11/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/05/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/04/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/05/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/11/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/03/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/07/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/01/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/01/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/04/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/12/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/11/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/07/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/07/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/11/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/06/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/03/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/06/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/09/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/10/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/08/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/12/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/10/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/02/1982' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/09/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/07/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/05/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/10/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/02/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/08/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/03/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/03/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/10/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/08/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/06/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/06/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/06/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/06/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/06/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/03/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/07/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/10/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/10/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/05/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/05/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/02/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/11/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/01/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/08/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/10/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/09/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/10/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/01/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/03/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/03/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/12/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/02/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/08/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/12/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/03/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/10/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/06/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/01/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/07/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/07/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/08/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/02/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/10/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/01/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/11/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/10/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/08/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/04/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/11/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/05/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/07/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/12/1982' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/09/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/08/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/06/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/04/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/04/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/08/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/05/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/05/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/01/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/10/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/08/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/04/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/11/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/09/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/12/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/08/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/06/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/04/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/01/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/09/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/05/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/07/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/01/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/01/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/07/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/02/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/11/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/09/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/05/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/12/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/10/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/03/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/05/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/01/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/01/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/11/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/09/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/02/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/09/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/01/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/03/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/12/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/08/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/03/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/06/1982' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/03/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/02/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/08/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/12/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/05/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/03/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/03/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/07/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/01/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/04/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/04/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/01/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/10/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/02/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/04/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/04/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/03/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/07/1981' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/02/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/08/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/08/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/04/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/09/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/09/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/05/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/10/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/10/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/08/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/03/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/11/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/08/1981' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/09/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/05/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/02/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/11/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/08/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/11/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/05/1980' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/10/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/10/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/05/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/10/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/02/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/08/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/10/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/04/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/12/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/03/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/08/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/02/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/11/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/03/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/07/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/08/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/06/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/01/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/01/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/04/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/05/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/12/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/02/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/02/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/10/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/11/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/04/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/07/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/04/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/05/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/04/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/04/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/08/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/11/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/08/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/10/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/01/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/01/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/01/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/01/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/08/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/03/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/11/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/01/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/06/1980' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/05/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/08/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/06/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/10/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/07/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/05/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/11/1982' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/12/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/06/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/04/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/02/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/08/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/05/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/03/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/10/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/11/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/05/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/10/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/04/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/11/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/05/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/05/1981' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/10/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/03/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/03/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/01/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/02/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/07/1980' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/02/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/12/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/08/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/08/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/09/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/08/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/09/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/10/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/11/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/09/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/07/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/09/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/03/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/07/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/09/1981' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/03/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/03/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/11/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/05/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/09/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/10/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/11/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/11/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/12/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/08/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/01/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/03/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/04/1981' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/07/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/01/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/04/1981' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/04/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/04/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/06/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/07/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/03/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/05/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/04/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/10/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/10/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/12/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/09/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/12/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/07/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/12/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/10/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/04/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/01/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/07/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/07/1980' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/05/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/01/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/06/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/04/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/10/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/01/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/10/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/08/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/08/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/07/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/03/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/02/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/12/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/02/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/03/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/10/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/03/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/10/1982' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/09/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/07/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/06/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/05/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/03/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/09/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/09/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/03/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/05/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/10/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/08/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/09/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/02/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/12/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/07/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/05/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/07/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/06/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/09/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/12/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/12/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/08/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/04/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/06/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/08/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/09/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/08/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/05/1982' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/02/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/02/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/09/1981' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/01/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/09/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/11/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/08/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/04/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/10/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/08/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/02/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/01/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/09/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/09/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/05/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/07/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/03/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/02/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/03/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/04/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/08/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/09/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/11/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/10/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/01/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/04/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/04/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/01/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/09/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/05/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/04/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/05/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/10/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/11/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/09/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/02/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/08/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/03/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/02/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/07/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/02/1980' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/10/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/02/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/07/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/06/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/12/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/03/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/03/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/03/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/03/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/06/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/02/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/12/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/11/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/11/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/02/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/08/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/09/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/02/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/02/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/02/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/12/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/11/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/12/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/03/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/07/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/12/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/06/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/09/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/05/1982' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/09/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/03/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/07/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/11/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/02/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/08/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/08/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/09/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/01/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/04/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/09/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/03/1982' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/09/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/07/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/01/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/08/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/01/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/02/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/11/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/06/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/06/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/06/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/12/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/09/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/09/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/05/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/03/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/03/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/06/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/11/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/07/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/08/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/05/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/01/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/12/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/04/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/11/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/08/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/04/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/07/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/04/1982' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/03/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/07/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/06/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/03/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/10/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/09/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/07/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/02/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/10/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/03/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/06/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/08/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/09/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/01/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/09/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/02/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/06/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/10/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/10/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/11/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/05/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/06/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/01/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/05/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/02/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/06/1981' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/08/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/09/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/03/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/07/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/09/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/02/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/04/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/01/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/07/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/10/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/12/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/12/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/08/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/12/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/06/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/03/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/12/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/07/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/09/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/03/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/06/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/09/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/08/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/09/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/08/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/08/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/07/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/03/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/11/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/09/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/02/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/01/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/04/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/03/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/10/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/12/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/11/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/07/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/06/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/02/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/03/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/12/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/11/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/08/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/10/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/11/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/02/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/03/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/05/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/04/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/04/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/05/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/05/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/06/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/03/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/02/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/05/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/09/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/05/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/06/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/11/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/06/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/01/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/05/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/09/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/11/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/05/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/09/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/10/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/03/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/04/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/08/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/07/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/10/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/12/1982' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/04/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/09/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/01/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/04/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/08/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/01/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/01/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/07/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/03/1981' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/06/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/04/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/01/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/11/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/05/1980' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/09/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/12/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/01/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/11/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/01/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/05/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/12/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/10/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/03/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/04/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/04/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/10/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/08/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/08/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/01/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/09/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/10/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/09/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/04/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/12/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/01/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/01/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/02/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/10/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/04/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/02/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/04/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/03/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/05/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/05/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/08/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/02/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/03/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/10/1982' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/10/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/07/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/05/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/03/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/05/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/11/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/02/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/05/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/01/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/11/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/12/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/07/1982' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/03/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/11/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/01/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/12/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/07/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/04/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/03/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/08/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/09/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/06/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/07/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/01/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/04/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/04/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/05/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/07/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/04/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/01/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/04/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/05/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/10/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/01/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/10/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/06/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/07/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/01/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/11/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/07/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/09/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/10/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/07/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/08/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/03/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/02/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/12/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/06/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/02/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/05/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/07/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/03/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/02/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/06/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/08/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/06/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/12/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/07/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/06/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/03/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/02/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/10/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/04/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/09/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/09/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/12/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/03/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/07/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/06/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/03/1980' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/01/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/01/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/10/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/02/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/09/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/08/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/09/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/05/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/05/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/08/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/08/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/05/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/11/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/05/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/05/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/08/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/04/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/11/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/06/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/07/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/10/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/06/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/06/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/09/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/03/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/01/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/06/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/11/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/07/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/11/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/10/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/08/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/10/1981' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/08/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/09/1982' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/01/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/08/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/03/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/05/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/11/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/07/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/11/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/07/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/11/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/10/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/02/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/06/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/10/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/01/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/08/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/08/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/03/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/12/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/03/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/02/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/04/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/02/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/08/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/08/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/09/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/01/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/12/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/01/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/06/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/06/1980' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/10/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/06/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/01/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/05/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/03/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/10/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/10/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/04/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/08/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/12/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/04/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/11/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/11/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/04/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/08/1982' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/08/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/08/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/12/1982' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/08/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/02/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/11/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/01/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/07/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/02/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/09/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/07/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/01/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/02/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/10/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/10/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/11/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/10/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/12/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/08/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/03/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/05/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/06/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/11/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/10/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/12/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/07/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/10/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/10/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/07/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/06/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/03/1982' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/01/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/02/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/11/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/10/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/05/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/09/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/04/1982' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/07/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/03/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/12/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/01/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/08/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/10/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/02/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/09/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/09/1980' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/08/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/10/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/12/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/09/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/08/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/06/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/04/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/05/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/05/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/05/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/12/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/08/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/09/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/03/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/04/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/01/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/03/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/02/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/04/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/12/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/12/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/04/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/01/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/05/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/07/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/05/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/11/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/12/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/01/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/05/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/09/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/04/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/09/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/07/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/07/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/03/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/08/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/10/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/03/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/03/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/11/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/11/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/07/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/12/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/10/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/10/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/10/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/04/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/06/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/01/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/10/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/09/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/12/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/06/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/07/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/06/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/11/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/04/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/01/1980' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/11/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/06/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/07/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/10/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/12/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/11/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/02/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/07/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/04/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/06/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/05/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/09/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/06/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/05/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/11/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/11/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/08/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/12/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/12/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/09/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/05/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/06/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/07/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/06/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/11/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/02/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/04/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/07/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/10/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/05/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/12/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/11/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/07/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/02/1981' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/10/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/02/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/01/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/07/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/07/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/03/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/07/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/07/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/06/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/02/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/09/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/10/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/08/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/04/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/03/1982' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/09/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/12/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/06/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/04/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/06/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/07/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/11/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/09/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/08/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/05/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/12/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/07/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/12/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/11/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/01/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/09/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/01/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/04/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/08/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/11/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/09/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/05/1981' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/03/1980' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/12/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/07/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/10/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/06/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/01/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/03/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/04/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/08/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/11/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/10/1982' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/10/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/06/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/07/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/01/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/09/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/03/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/10/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/10/1982' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/04/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/05/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/11/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/10/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/05/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/10/1980' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/11/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/11/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/05/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/05/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/04/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/02/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/08/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/07/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/11/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/10/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/07/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/04/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/08/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/05/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/05/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/09/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/02/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/12/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/12/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/01/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/10/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/12/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/01/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/06/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/03/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/12/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/01/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/09/1980' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/05/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/12/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/05/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/09/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/08/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/04/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/03/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/01/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/08/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/09/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/06/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/05/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/03/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/03/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/11/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/03/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/05/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/05/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/01/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/08/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/07/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/12/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/1981' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/06/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/12/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/05/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/06/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/10/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/12/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/04/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/11/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/05/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/12/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/03/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/08/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/06/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/07/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/09/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/06/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/07/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/06/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/08/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/11/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/08/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/01/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/09/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/03/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/07/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/09/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/01/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/12/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/08/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/10/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/04/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/08/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/11/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/07/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/07/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/03/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/12/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/12/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/07/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/04/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/02/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/04/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/05/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/12/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/05/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/10/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/08/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/08/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/04/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/11/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/10/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/09/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/01/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/10/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/02/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/05/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/07/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/07/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/07/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/03/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/04/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/11/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/03/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/05/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/11/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/07/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/09/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/09/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/05/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/09/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/07/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/08/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/06/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/12/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/08/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/05/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/12/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/09/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/08/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/01/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/06/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/01/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/08/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/08/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/08/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/02/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/04/1982' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/10/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/12/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/12/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/02/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/06/1982' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/04/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/01/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/04/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/05/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/07/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/05/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/07/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/11/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/07/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/06/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/03/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/03/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/12/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/06/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/02/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/10/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/08/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/07/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/10/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/05/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/08/1981' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/09/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/04/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/08/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/04/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/11/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/10/1981' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/02/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/02/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/12/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/12/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/01/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/06/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/03/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/10/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/03/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/08/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/08/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/06/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/04/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/06/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/03/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/02/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/08/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/12/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/02/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/05/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/11/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/06/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/04/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/09/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/06/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/12/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/07/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/05/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/06/1980' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/04/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/07/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/09/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/06/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/12/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/05/1982' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/11/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/04/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/03/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/12/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/09/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/06/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/08/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/10/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/11/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/06/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/06/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/07/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/04/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/05/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/08/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/04/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/05/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/04/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/10/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/01/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/01/1981' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/03/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/06/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/01/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/10/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/02/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/01/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/12/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/11/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/05/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/01/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/05/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/04/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/11/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/03/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/02/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/10/1981' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/10/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/03/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/05/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/07/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/04/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/01/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/11/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/08/1980' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/09/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/05/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/10/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/09/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/11/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/06/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/06/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/02/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/11/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/06/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/05/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/01/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/05/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/05/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/05/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/05/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/05/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/08/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/07/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/07/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/09/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/08/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/02/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/06/1996' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/07/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/08/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/06/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/08/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/08/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/06/1981' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/06/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/06/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/07/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/08/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/09/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/05/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/11/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/09/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/07/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/05/1981' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/04/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/06/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/07/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/03/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/01/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/01/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/08/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/05/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/06/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/09/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/06/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/08/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/12/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/10/1980' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/09/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/11/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/04/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/06/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/02/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/08/1982' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/05/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/08/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/07/1982' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/04/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/12/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/07/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/02/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/04/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/02/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/01/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/03/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/02/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/09/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/03/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/05/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/07/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/10/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/07/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/08/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/11/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/09/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/07/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/12/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/06/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/05/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/10/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/08/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/09/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/09/2006' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/01/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/12/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/04/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/07/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/03/1981' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/06/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/05/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/10/1981' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/05/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/08/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/12/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/05/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/05/1980' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/07/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/01/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/12/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/05/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/12/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/12/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/12/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/02/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/05/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/03/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/10/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/04/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/07/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/01/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/04/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/12/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/03/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/11/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/05/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/08/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/01/1981' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/07/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/12/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/02/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/04/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/11/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/03/1980' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/12/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/03/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/10/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/03/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/07/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/10/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/06/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/12/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/12/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/12/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/04/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/05/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/12/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/05/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/08/1993' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/03/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/07/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/05/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/03/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/03/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/08/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/06/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/09/1986' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/07/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/08/2019' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/06/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/08/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/08/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/11/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/10/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/02/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/05/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/10/1999' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/03/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/08/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/11/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/11/1980' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/11/1981' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/04/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/06/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/08/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/08/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/01/1994' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/06/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/01/1982' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/08/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/02/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/07/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/07/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/09/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/06/1980' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/05/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/06/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/11/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/01/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/11/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/05/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/04/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/06/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/04/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/08/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/05/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/11/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/12/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/05/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/07/2002' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/08/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/08/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/04/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/10/1987' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/08/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/07/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/07/1998' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '30/04/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '19/02/2018' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/08/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/07/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/01/1995' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/01/1990' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/05/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/05/1991' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/06/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/08/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/11/1985' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '20/07/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/08/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/03/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/06/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/06/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '24/06/2009' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/06/2017' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/12/1989' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/10/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/08/2008' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '27/11/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/04/2011' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/07/2013' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '17/09/2003' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/05/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/11/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/07/1981' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/06/1984' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/10/2012' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '26/06/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/07/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '18/08/2010' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '13/03/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/01/1982' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/01/1997' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '29/06/2005' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '31/10/2001' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/03/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/08/2007' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/02/1992' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/04/1980' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '15/10/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/09/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/06/2004' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '22/06/1988' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '23/12/2016' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '14/01/2015' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '21/08/2014' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/12/2020' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '16/12/2000' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '28/08/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n",
      "C:\\Users\\Tata\\AppData\\Local\\Temp\\ipykernel_30644\\929082533.py:1: UserWarning: Parsing '25/08/1983' in DD/MM/YYYY format. Provide format or specify infer_datetime_format=True for consistent parsing.\n",
      "  df['released'] = pd.to_datetime(df['released'])\n"
     ]
    }
   ],
   "source": [
    "df['released'] = pd.to_datetime(df['released'])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. change the budget and gross so replace them by 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-06T04:33:00.480330Z",
     "iopub.status.busy": "2023-04-06T04:33:00.479980Z",
     "iopub.status.idle": "2023-04-06T04:33:00.494003Z",
     "shell.execute_reply": "2023-04-06T04:33:00.492762Z",
     "shell.execute_reply.started": "2023-04-06T04:33:00.480296Z"
    }
   },
   "outputs": [],
   "source": [
    "df.fillna({'budget' : '0', 'gross' : '0'}, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-06T04:33:00.496054Z",
     "iopub.status.busy": "2023-04-06T04:33:00.495613Z",
     "iopub.status.idle": "2023-04-06T04:33:00.510885Z",
     "shell.execute_reply": "2023-04-06T04:33:00.509879Z",
     "shell.execute_reply.started": "2023-04-06T04:33:00.496016Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Series([], dtype: int64)\n"
     ]
    }
   ],
   "source": [
    "missing_counts = df.isnull().sum()\n",
    "print(missing_counts[missing_counts>0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1. EDA Visualization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We should understanding the basic information of the data. Let's check it first"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-06T04:33:00.513175Z",
     "iopub.status.busy": "2023-04-06T04:33:00.512713Z",
     "iopub.status.idle": "2023-04-06T04:33:00.544607Z",
     "shell.execute_reply": "2023-04-06T04:33:00.543583Z",
     "shell.execute_reply.started": "2023-04-06T04:33:00.513139Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>year</th>\n",
       "      <td>7608.0</td>\n",
       "      <td>2000.482256</td>\n",
       "      <td>11.137108</td>\n",
       "      <td>1980.0</td>\n",
       "      <td>1991.0</td>\n",
       "      <td>2001.0</td>\n",
       "      <td>2010.0</td>\n",
       "      <td>2020.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>score</th>\n",
       "      <td>7608.0</td>\n",
       "      <td>6.390352</td>\n",
       "      <td>0.968166</td>\n",
       "      <td>1.9</td>\n",
       "      <td>5.8</td>\n",
       "      <td>6.5</td>\n",
       "      <td>7.1</td>\n",
       "      <td>9.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>votes</th>\n",
       "      <td>7608.0</td>\n",
       "      <td>88684.247766</td>\n",
       "      <td>163786.266707</td>\n",
       "      <td>7.0</td>\n",
       "      <td>9300.0</td>\n",
       "      <td>33000.0</td>\n",
       "      <td>94000.0</td>\n",
       "      <td>2400000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>runtime</th>\n",
       "      <td>7608.0</td>\n",
       "      <td>107.290352</td>\n",
       "      <td>18.616869</td>\n",
       "      <td>55.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>104.0</td>\n",
       "      <td>116.0</td>\n",
       "      <td>366.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          count          mean            std     min     25%      50%  \\\n",
       "year     7608.0   2000.482256      11.137108  1980.0  1991.0   2001.0   \n",
       "score    7608.0      6.390352       0.968166     1.9     5.8      6.5   \n",
       "votes    7608.0  88684.247766  163786.266707     7.0  9300.0  33000.0   \n",
       "runtime  7608.0    107.290352      18.616869    55.0    95.0    104.0   \n",
       "\n",
       "             75%        max  \n",
       "year      2010.0     2020.0  \n",
       "score        7.1        9.3  \n",
       "votes    94000.0  2400000.0  \n",
       "runtime    116.0      366.0  "
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe().T"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#NOTE\n",
    "\n",
    "df.describe() is a pandas method that returns a summary of the statistics of a DataFrame. The T attribute transposes the DataFrame, so that the rows become columns and the columns become rows.\n",
    "\n",
    "The resulting transposed DataFrame will have the following columns:\n",
    "\n",
    "* count: the number of non-missing (non-NaN) values in each column\n",
    "* mean: the arithmetic mean (average) of each column\n",
    "* std: the standard deviation of each column\n",
    "* min: the minimum value of each column\n",
    "* 25%: the 25th percentile (1st quartile) of each column\n",
    "* 50%: the 50th percentile (median) of each column\n",
    "* 75%: the 75th percentile (3rd quartile) of each column\n",
    "* max: the maximum value of each column"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "condlusion: \n",
    "* we have 7612 titles of films\n",
    "* the studied time lapse goes from 1986 to 2016\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How many films released per year?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-06T04:33:00.546781Z",
     "iopub.status.busy": "2023-04-06T04:33:00.546380Z",
     "iopub.status.idle": "2023-04-06T04:33:01.009008Z",
     "shell.execute_reply": "2023-04-06T04:33:01.007207Z",
     "shell.execute_reply.started": "2023-04-06T04:33:00.546743Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "counts = df['year'].value_counts().sort_index()\n",
    "plt.bar(counts.index, counts.values)\n",
    "plt.xlabel('Year of release')\n",
    "plt.ylabel('Number of movies')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### What is the oldest and the newest movie?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(r'D:\\Data Analis\\youtube\\Newmovie.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-04-06T04:33:01.016688Z",
     "iopub.status.busy": "2023-04-06T04:33:01.015411Z",
     "iopub.status.idle": "2023-04-06T04:33:01.186184Z",
     "shell.execute_reply": "2023-04-06T04:33:01.182552Z",
     "shell.execute_reply.started": "2023-04-06T04:33:01.016638Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>released</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>197</th>\n",
       "      <td>Scream</td>\n",
       "      <td>01/01/1981</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>173</th>\n",
       "      <td>Pennies from Heaven</td>\n",
       "      <td>01/01/1982</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>179</th>\n",
       "      <td>Zoot Suit</td>\n",
       "      <td>01/01/1982</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>621</th>\n",
       "      <td>Windy City</td>\n",
       "      <td>01/01/1986</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2440</th>\n",
       "      <td>Texas Chainsaw Massacre: The Next Generation</td>\n",
       "      <td>01/01/1994</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              name    released\n",
       "197                                         Scream  01/01/1981\n",
       "173                            Pennies from Heaven  01/01/1982\n",
       "179                                      Zoot Suit  01/01/1982\n",
       "621                                     Windy City  01/01/1986\n",
       "2440  Texas Chainsaw Massacre: The Next Generation  01/01/1994"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Oldest = df.sort_values('released', ascending = True)\n",
    "\n",
    "#specify the column we want to show\n",
    "Oldest[['name', \"released\"]] [:5]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "execution": {
     "iopub.status.busy": "2023-04-06T04:33:01.189401Z",
     "iopub.status.idle": "2023-04-06T04:33:01.190651Z",
     "shell.execute_reply": "2023-04-06T04:33:01.190373Z",
     "shell.execute_reply.started": "2023-04-06T04:33:01.190345Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>released</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4134</th>\n",
       "      <td>Dahmer</td>\n",
       "      <td>31/12/2018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6357</th>\n",
       "      <td>Romeo and Juliet</td>\n",
       "      <td>31/12/2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3572</th>\n",
       "      <td>Liberty Heights</td>\n",
       "      <td>31/12/1999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3187</th>\n",
       "      <td>Oscar and Lucinda</td>\n",
       "      <td>31/12/1997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6398</th>\n",
       "      <td>Nightcrawler</td>\n",
       "      <td>31/10/2014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6488</th>\n",
       "      <td>Before I Go to Sleep</td>\n",
       "      <td>31/10/2014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5778</th>\n",
       "      <td>Hatchet II</td>\n",
       "      <td>31/10/2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5215</th>\n",
       "      <td>RocknRolla</td>\n",
       "      <td>31/10/2008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5206</th>\n",
       "      <td>Zack and Miri Make a Porno</td>\n",
       "      <td>31/10/2008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5309</th>\n",
       "      <td>Rachel Getting Married</td>\n",
       "      <td>31/10/2008</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            name    released\n",
       "4134                      Dahmer  31/12/2018\n",
       "6357            Romeo and Juliet  31/12/2012\n",
       "3572             Liberty Heights  31/12/1999\n",
       "3187           Oscar and Lucinda  31/12/1997\n",
       "6398                Nightcrawler  31/10/2014\n",
       "6488        Before I Go to Sleep  31/10/2014\n",
       "5778                  Hatchet II  31/10/2010\n",
       "5215                  RocknRolla  31/10/2008\n",
       "5206  Zack and Miri Make a Porno  31/10/2008\n",
       "5309      Rachel Getting Married  31/10/2008"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Newest = df.sort_values(\"released\", ascending = False)\n",
    "\n",
    "#specify the column we want to show\n",
    "Newest[['name', \"released\"]][:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### What country most released films?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "execution": {
     "iopub.status.busy": "2023-04-06T04:33:01.191866Z",
     "iopub.status.idle": "2023-04-06T04:33:01.192308Z",
     "shell.execute_reply": "2023-04-06T04:33:01.192097Z",
     "shell.execute_reply.started": "2023-04-06T04:33:01.192073Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "country\n",
       "United States     5454\n",
       "United Kingdom     804\n",
       "France             271\n",
       "Canada             188\n",
       "Germany            117\n",
       "Australia           91\n",
       "Japan               80\n",
       "India               62\n",
       "Italy               60\n",
       "Spain               47\n",
       "Name: name, dtype: int64"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#create a code data for shorting the data\n",
    "\n",
    "country = df.groupby('country')['name'].count()\n",
    "country = country.sort_values(ascending = False)\n",
    "top10 = country.head(10)\n",
    "\n",
    "top10"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's check just 10 countires"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "execution": {
     "iopub.status.busy": "2023-04-06T04:33:01.193462Z",
     "iopub.status.idle": "2023-04-06T04:33:01.194951Z",
     "shell.execute_reply": "2023-04-06T04:33:01.194741Z",
     "shell.execute_reply.started": "2023-04-06T04:33:01.194715Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "my_palette = sns.color_palette(\"Set2\", 10)\n",
    "country = df.groupby('country')['name'].count()\n",
    "country = country.sort_values(ascending=False)\n",
    "top10 = country.head(10)\n",
    "\n",
    "sns.barplot(y=top10.index, x=top10.values, palette=my_palette, orient='h')\n",
    "plt.title('Top 10 film producing countries')\n",
    "plt.xlabel('Number of films')\n",
    "plt.ylabel('Country')\n",
    "\n",
    "plt.xticks(rotation=0, ha='center')\n",
    "\n",
    "for i, count in enumerate(top10.values):\n",
    "    plt.text(count/2, i, count, ha='left', va='center', color='black', fontweight='medium')\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Country most release film and the genre"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "execution": {
     "iopub.status.busy": "2023-04-06T04:33:01.196428Z",
     "iopub.status.idle": "2023-04-06T04:33:01.197270Z",
     "shell.execute_reply": "2023-04-06T04:33:01.197013Z",
     "shell.execute_reply.started": "2023-04-06T04:33:01.196986Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>genre</th>\n",
       "      <th>Action</th>\n",
       "      <th>Adventure</th>\n",
       "      <th>Animation</th>\n",
       "      <th>Biography</th>\n",
       "      <th>Comedy</th>\n",
       "      <th>Crime</th>\n",
       "      <th>Drama</th>\n",
       "      <th>Family</th>\n",
       "      <th>Fantasy</th>\n",
       "      <th>History</th>\n",
       "      <th>Horror</th>\n",
       "      <th>Music</th>\n",
       "      <th>Musical</th>\n",
       "      <th>Mystery</th>\n",
       "      <th>Romance</th>\n",
       "      <th>Sci-Fi</th>\n",
       "      <th>Sport</th>\n",
       "      <th>Thriller</th>\n",
       "      <th>Western</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>country</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>United States</th>\n",
       "      <td>1297.0</td>\n",
       "      <td>277.0</td>\n",
       "      <td>237.0</td>\n",
       "      <td>251.0</td>\n",
       "      <td>1794.0</td>\n",
       "      <td>380.0</td>\n",
       "      <td>896.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>245.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>United Kingdom</th>\n",
       "      <td>125.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>109.0</td>\n",
       "      <td>188.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>200.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>France</th>\n",
       "      <td>46.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "genre           Action  Adventure  Animation  Biography  Comedy  Crime  Drama  \\\n",
       "country                                                                         \n",
       "United States   1297.0      277.0      237.0      251.0  1794.0  380.0  896.0   \n",
       "United Kingdom   125.0       75.0       16.0      109.0   188.0   52.0  200.0   \n",
       "France            46.0       16.0       10.0       19.0    50.0   23.0   96.0   \n",
       "\n",
       "genre           Family  Fantasy  History  Horror  Music  Musical  Mystery  \\\n",
       "country                                                                     \n",
       "United States      9.0     34.0      NaN   245.0    NaN      NaN     14.0   \n",
       "United Kingdom     1.0      1.0      NaN    24.0    NaN      2.0      1.0   \n",
       "France             NaN      1.0      NaN     3.0    1.0      NaN      2.0   \n",
       "\n",
       "genre           Romance  Sci-Fi  Sport  Thriller  Western  \n",
       "country                                                    \n",
       "United States       3.0     7.0    1.0       8.0      1.0  \n",
       "United Kingdom      4.0     2.0    NaN       3.0      1.0  \n",
       "France              2.0     NaN    NaN       2.0      NaN  "
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#group by year and genre to get count of country\n",
    "dfg = df.groupby([df.country, 'genre']).genre.count().reset_index(name='count')\n",
    "\n",
    "#pivot into correct form for stcaked bar \n",
    "dfp = dfg.pivot(index = 'country', columns = 'genre', values = 'count')\n",
    "\n",
    "#get the top 5\n",
    "top3_countries = dfp.sum(axis = 1).sort_values(ascending = False).head(3).index\n",
    "\n",
    "#plot top 5\n",
    "top3 = dfp.loc[top3_countries]\n",
    "\n",
    "top3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "execution": {
     "iopub.status.busy": "2023-04-06T04:33:01.205647Z",
     "iopub.status.idle": "2023-04-06T04:33:01.206607Z",
     "shell.execute_reply": "2023-04-06T04:33:01.206300Z",
     "shell.execute_reply.started": "2023-04-06T04:33:01.206269Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#get the top 5\n",
    "top3_countries = dfp.sum(axis = 1).sort_values(ascending = False).head(3).index\n",
    "\n",
    "#plot top 5\n",
    "top3 = dfp.loc[top3_countries]\n",
    "my_palette = sns.color_palette(\"Set2\")\n",
    "sns.set_palette(my_palette)\n",
    "\n",
    "top3.plot.bar(stacked = True, xlabel = 'Country', ylabel = 'Number of Films', edgecolor = None, )\n",
    "plt.title('Top 3 film producing countries with the genre')\n",
    "plt.legend(title = 'genre', bbox_to_anchor = (1.05,1), loc = 'upper left')\n",
    "plt.xticks(rotation = 0)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### most watched genre"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "execution": {
     "iopub.status.busy": "2023-04-06T04:33:01.208283Z",
     "iopub.status.idle": "2023-04-06T04:33:01.209194Z",
     "shell.execute_reply": "2023-04-06T04:33:01.208942Z",
     "shell.execute_reply.started": "2023-04-06T04:33:01.208913Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#counts the genre \n",
    "genre_c = df['genre'].value_counts()\n",
    "\n",
    "#get the top 9\n",
    "top9_genre = genre_c.sort_values(ascending = False).head(9).index\n",
    "\n",
    "#plot top 5\n",
    "top9 = genre_c.loc[top9_genre]\n",
    "\n",
    "labels = top9.index\n",
    "sizes = top9.values\n",
    "\n",
    "plt.pie(sizes, labels = labels, autopct = '%1.2f%%', textprops = {'fontsize' : 10}, colors = sns.color_palette('Set2'))\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "execution": {
     "iopub.status.busy": "2023-04-06T04:33:01.210843Z",
     "iopub.status.idle": "2023-04-06T04:33:01.211756Z",
     "shell.execute_reply": "2023-04-06T04:33:01.211467Z",
     "shell.execute_reply.started": "2023-04-06T04:33:01.211440Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7073                                thefyzz\n",
       "403                                     nan\n",
       "5611                            micro_scope\n",
       "6356               iDeal Partners Film Fund\n",
       "3954                               i5 Films\n",
       "                       ...                 \n",
       "5758                        10 West Studios\n",
       "3695                     1+2 Seisaku Iinkai\n",
       "2972                        .406 Production\n",
       "7469    \"Weathering With You\" Film Partners\n",
       "4292        \"DIA\" Productions GmbH & Co. KG\n",
       "Name: company, Length: 2362, dtype: object"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#change data type 'company' to string\n",
    "df['company'] = df['company'].astype(str)\n",
    "\n",
    "#drop any duplication\n",
    "df['company'].drop_duplicates().sort_values(ascending=False)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Companies that often release film"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "execution": {
     "iopub.status.busy": "2023-04-06T04:33:01.213382Z",
     "iopub.status.idle": "2023-04-06T04:33:01.220937Z",
     "shell.execute_reply": "2023-04-06T04:33:01.220686Z",
     "shell.execute_reply.started": "2023-04-06T04:33:01.220654Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "company\n",
       "Universal Pictures           377\n",
       "Warner Bros.                 334\n",
       "Columbia Pictures            332\n",
       "Paramount Pictures           320\n",
       "Twentieth Century Fox        239\n",
       "New Line Cinema              174\n",
       "Touchstone Pictures          132\n",
       "Metro-Goldwyn-Mayer (MGM)    124\n",
       "Walt Disney Pictures         123\n",
       "TriStar Pictures              93\n",
       "Name: name, dtype: int64"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#create a code data for shorting the data\n",
    "\n",
    "companies = df.groupby('company')['name'].count()\n",
    "companies = companies.sort_values(ascending = False)\n",
    "top10 = companies.head(10)\n",
    "\n",
    "top10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "execution": {
     "iopub.status.busy": "2023-04-06T04:33:01.222602Z",
     "iopub.status.idle": "2023-04-06T04:33:01.223458Z",
     "shell.execute_reply": "2023-04-06T04:33:01.223211Z",
     "shell.execute_reply.started": "2023-04-06T04:33:01.223180Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "companies = df.groupby('company')['name'].count()\n",
    "companies = companies.sort_values(ascending = False)\n",
    "top10 = companies.head(10)\n",
    "\n",
    "my_palette = sns.color_palette('Set2')\n",
    "sns.set_palette(my_palette)\n",
    "\n",
    "ax = sns.barplot(x = top10.values, y = top10.index, palette = my_palette, orient = 'h')\n",
    "plt.title('Companies that Often Release Films')\n",
    "plt.xlabel('Number of films')\n",
    "plt.ylabel('Company')\n",
    "plt.xticks(rotation = 0)\n",
    "\n",
    "for i, count in enumerate(top10.values):\n",
    "    ax.text(count/2, i, count, ha='center', va='center', fontweight='medium')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "execution": {
     "iopub.status.busy": "2023-04-06T04:33:01.225242Z",
     "iopub.status.idle": "2023-04-06T04:33:01.226341Z",
     "shell.execute_reply": "2023-04-06T04:33:01.226009Z",
     "shell.execute_reply.started": "2023-04-06T04:33:01.225958Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>year</th>\n",
       "      <td>7612.0</td>\n",
       "      <td>2.000489e+03</td>\n",
       "      <td>1.113923e+01</td>\n",
       "      <td>1980.0</td>\n",
       "      <td>1991.0</td>\n",
       "      <td>2001.0</td>\n",
       "      <td>2010.0</td>\n",
       "      <td>2.020000e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>score</th>\n",
       "      <td>7609.0</td>\n",
       "      <td>6.389920e+00</td>\n",
       "      <td>9.682334e-01</td>\n",
       "      <td>1.9</td>\n",
       "      <td>5.8</td>\n",
       "      <td>6.5</td>\n",
       "      <td>7.1</td>\n",
       "      <td>9.300000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>votes</th>\n",
       "      <td>7609.0</td>\n",
       "      <td>8.868297e+04</td>\n",
       "      <td>1.637758e+05</td>\n",
       "      <td>7.0</td>\n",
       "      <td>9300.0</td>\n",
       "      <td>33000.0</td>\n",
       "      <td>94000.0</td>\n",
       "      <td>2.400000e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>budget</th>\n",
       "      <td>5482.0</td>\n",
       "      <td>3.567303e+07</td>\n",
       "      <td>4.148239e+07</td>\n",
       "      <td>3000.0</td>\n",
       "      <td>10000000.0</td>\n",
       "      <td>21000000.0</td>\n",
       "      <td>45000000.0</td>\n",
       "      <td>3.560000e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gross</th>\n",
       "      <td>7433.0</td>\n",
       "      <td>7.897999e+07</td>\n",
       "      <td>1.661247e+08</td>\n",
       "      <td>309.0</td>\n",
       "      <td>4634077.0</td>\n",
       "      <td>20387597.0</td>\n",
       "      <td>76419755.0</td>\n",
       "      <td>2.847246e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>runtime</th>\n",
       "      <td>7610.0</td>\n",
       "      <td>1.072853e+02</td>\n",
       "      <td>1.861790e+01</td>\n",
       "      <td>55.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>104.0</td>\n",
       "      <td>116.0</td>\n",
       "      <td>3.660000e+02</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          count          mean           std     min         25%         50%  \\\n",
       "year     7612.0  2.000489e+03  1.113923e+01  1980.0      1991.0      2001.0   \n",
       "score    7609.0  6.389920e+00  9.682334e-01     1.9         5.8         6.5   \n",
       "votes    7609.0  8.868297e+04  1.637758e+05     7.0      9300.0     33000.0   \n",
       "budget   5482.0  3.567303e+07  4.148239e+07  3000.0  10000000.0  21000000.0   \n",
       "gross    7433.0  7.897999e+07  1.661247e+08   309.0   4634077.0  20387597.0   \n",
       "runtime  7610.0  1.072853e+02  1.861790e+01    55.0        95.0       104.0   \n",
       "\n",
       "                75%           max  \n",
       "year         2010.0  2.020000e+03  \n",
       "score           7.1  9.300000e+00  \n",
       "votes       94000.0  2.400000e+06  \n",
       "budget   45000000.0  3.560000e+08  \n",
       "gross    76419755.0  2.847246e+09  \n",
       "runtime       116.0  3.660000e+02  "
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe().T"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2. Find the Correlation of the Parameter\n",
    "\n",
    "I want to check the parameter that affect the gross. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "execution": {
     "iopub.status.busy": "2023-04-06T04:33:01.228234Z",
     "iopub.status.idle": "2023-04-06T04:33:01.229228Z",
     "shell.execute_reply": "2023-04-06T04:33:01.228944Z",
     "shell.execute_reply.started": "2023-04-06T04:33:01.228914Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>rating</th>\n",
       "      <th>genre</th>\n",
       "      <th>year</th>\n",
       "      <th>released</th>\n",
       "      <th>score</th>\n",
       "      <th>votes</th>\n",
       "      <th>director</th>\n",
       "      <th>writer</th>\n",
       "      <th>star</th>\n",
       "      <th>country</th>\n",
       "      <th>budget</th>\n",
       "      <th>gross</th>\n",
       "      <th>company</th>\n",
       "      <th>runtime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5392</th>\n",
       "      <td>Avatar</td>\n",
       "      <td>PG-13</td>\n",
       "      <td>Action</td>\n",
       "      <td>2009</td>\n",
       "      <td>18/12/2009</td>\n",
       "      <td>7.8</td>\n",
       "      <td>1100000.0</td>\n",
       "      <td>James Cameron</td>\n",
       "      <td>James Cameron</td>\n",
       "      <td>Sam Worthington</td>\n",
       "      <td>United States</td>\n",
       "      <td>237000000.0</td>\n",
       "      <td>2.847246e+09</td>\n",
       "      <td>Twentieth Century Fox</td>\n",
       "      <td>162.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7389</th>\n",
       "      <td>Avengers: Endgame</td>\n",
       "      <td>PG-13</td>\n",
       "      <td>Action</td>\n",
       "      <td>2019</td>\n",
       "      <td>26/04/2019</td>\n",
       "      <td>8.4</td>\n",
       "      <td>903000.0</td>\n",
       "      <td>Anthony Russo</td>\n",
       "      <td>Christopher Markus</td>\n",
       "      <td>Robert Downey Jr.</td>\n",
       "      <td>United States</td>\n",
       "      <td>356000000.0</td>\n",
       "      <td>2.797501e+09</td>\n",
       "      <td>Marvel Studios</td>\n",
       "      <td>181.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2993</th>\n",
       "      <td>Titanic</td>\n",
       "      <td>PG-13</td>\n",
       "      <td>Drama</td>\n",
       "      <td>1997</td>\n",
       "      <td>19/12/1997</td>\n",
       "      <td>7.8</td>\n",
       "      <td>1100000.0</td>\n",
       "      <td>James Cameron</td>\n",
       "      <td>James Cameron</td>\n",
       "      <td>Leonardo DiCaprio</td>\n",
       "      <td>United States</td>\n",
       "      <td>200000000.0</td>\n",
       "      <td>2.201647e+09</td>\n",
       "      <td>Twentieth Century Fox</td>\n",
       "      <td>194.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6607</th>\n",
       "      <td>Star Wars: Episode VII - The Force Awakens</td>\n",
       "      <td>PG-13</td>\n",
       "      <td>Action</td>\n",
       "      <td>2015</td>\n",
       "      <td>18/12/2015</td>\n",
       "      <td>7.8</td>\n",
       "      <td>876000.0</td>\n",
       "      <td>J.J. Abrams</td>\n",
       "      <td>Lawrence Kasdan</td>\n",
       "      <td>Daisy Ridley</td>\n",
       "      <td>United States</td>\n",
       "      <td>245000000.0</td>\n",
       "      <td>2.069522e+09</td>\n",
       "      <td>Lucasfilm</td>\n",
       "      <td>138.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7188</th>\n",
       "      <td>Avengers: Infinity War</td>\n",
       "      <td>PG-13</td>\n",
       "      <td>Action</td>\n",
       "      <td>2018</td>\n",
       "      <td>27/04/2018</td>\n",
       "      <td>8.4</td>\n",
       "      <td>897000.0</td>\n",
       "      <td>Anthony Russo</td>\n",
       "      <td>Christopher Markus</td>\n",
       "      <td>Robert Downey Jr.</td>\n",
       "      <td>United States</td>\n",
       "      <td>321000000.0</td>\n",
       "      <td>2.048360e+09</td>\n",
       "      <td>Marvel Studios</td>\n",
       "      <td>149.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7607</th>\n",
       "      <td>More to Life</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Drama</td>\n",
       "      <td>2020</td>\n",
       "      <td>23/10/2020</td>\n",
       "      <td>3.1</td>\n",
       "      <td>18.0</td>\n",
       "      <td>Joseph Ebanks</td>\n",
       "      <td>Joseph Ebanks</td>\n",
       "      <td>Shannon Bond</td>\n",
       "      <td>United States</td>\n",
       "      <td>7000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>nan</td>\n",
       "      <td>90.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7608</th>\n",
       "      <td>Dream Round</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Comedy</td>\n",
       "      <td>2020</td>\n",
       "      <td>07/02/2020</td>\n",
       "      <td>4.7</td>\n",
       "      <td>36.0</td>\n",
       "      <td>Dusty Dukatz</td>\n",
       "      <td>Lisa Huston</td>\n",
       "      <td>Michael Saquella</td>\n",
       "      <td>United States</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Cactus Blue Entertainment</td>\n",
       "      <td>90.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7609</th>\n",
       "      <td>Saving Mbango</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Drama</td>\n",
       "      <td>2020</td>\n",
       "      <td>27/04/2020</td>\n",
       "      <td>5.7</td>\n",
       "      <td>29.0</td>\n",
       "      <td>Nkanya Nkwai</td>\n",
       "      <td>Lynno Lovert</td>\n",
       "      <td>Onyama Laura</td>\n",
       "      <td>United States</td>\n",
       "      <td>58750.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Embi Productions</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7610</th>\n",
       "      <td>It's Just Us</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Drama</td>\n",
       "      <td>2020</td>\n",
       "      <td>01/10/2020</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>James Randall</td>\n",
       "      <td>James Randall</td>\n",
       "      <td>Christina Roz</td>\n",
       "      <td>United States</td>\n",
       "      <td>15000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>nan</td>\n",
       "      <td>120.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7611</th>\n",
       "      <td>Tee em el</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Horror</td>\n",
       "      <td>2020</td>\n",
       "      <td>19/08/2020</td>\n",
       "      <td>5.7</td>\n",
       "      <td>7.0</td>\n",
       "      <td>Pereko Mosia</td>\n",
       "      <td>Pereko Mosia</td>\n",
       "      <td>Siyabonga Mabaso</td>\n",
       "      <td>South Africa</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>PK 65 Films</td>\n",
       "      <td>102.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7612 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                            name rating   genre  year  \\\n",
       "5392                                      Avatar  PG-13  Action  2009   \n",
       "7389                           Avengers: Endgame  PG-13  Action  2019   \n",
       "2993                                     Titanic  PG-13   Drama  1997   \n",
       "6607  Star Wars: Episode VII - The Force Awakens  PG-13  Action  2015   \n",
       "7188                      Avengers: Infinity War  PG-13  Action  2018   \n",
       "...                                          ...    ...     ...   ...   \n",
       "7607                                More to Life    NaN   Drama  2020   \n",
       "7608                                 Dream Round    NaN  Comedy  2020   \n",
       "7609                               Saving Mbango    NaN   Drama  2020   \n",
       "7610                                It's Just Us    NaN   Drama  2020   \n",
       "7611                                   Tee em el    NaN  Horror  2020   \n",
       "\n",
       "        released  score      votes       director              writer  \\\n",
       "5392  18/12/2009    7.8  1100000.0  James Cameron       James Cameron   \n",
       "7389  26/04/2019    8.4   903000.0  Anthony Russo  Christopher Markus   \n",
       "2993  19/12/1997    7.8  1100000.0  James Cameron       James Cameron   \n",
       "6607  18/12/2015    7.8   876000.0    J.J. Abrams     Lawrence Kasdan   \n",
       "7188  27/04/2018    8.4   897000.0  Anthony Russo  Christopher Markus   \n",
       "...          ...    ...        ...            ...                 ...   \n",
       "7607  23/10/2020    3.1       18.0  Joseph Ebanks       Joseph Ebanks   \n",
       "7608  07/02/2020    4.7       36.0   Dusty Dukatz         Lisa Huston   \n",
       "7609  27/04/2020    5.7       29.0   Nkanya Nkwai        Lynno Lovert   \n",
       "7610  01/10/2020    NaN        NaN  James Randall       James Randall   \n",
       "7611  19/08/2020    5.7        7.0   Pereko Mosia        Pereko Mosia   \n",
       "\n",
       "                   star        country       budget         gross  \\\n",
       "5392    Sam Worthington  United States  237000000.0  2.847246e+09   \n",
       "7389  Robert Downey Jr.  United States  356000000.0  2.797501e+09   \n",
       "2993  Leonardo DiCaprio  United States  200000000.0  2.201647e+09   \n",
       "6607       Daisy Ridley  United States  245000000.0  2.069522e+09   \n",
       "7188  Robert Downey Jr.  United States  321000000.0  2.048360e+09   \n",
       "...                 ...            ...          ...           ...   \n",
       "7607       Shannon Bond  United States       7000.0           NaN   \n",
       "7608   Michael Saquella  United States          NaN           NaN   \n",
       "7609       Onyama Laura  United States      58750.0           NaN   \n",
       "7610      Christina Roz  United States      15000.0           NaN   \n",
       "7611   Siyabonga Mabaso   South Africa          NaN           NaN   \n",
       "\n",
       "                        company  runtime  \n",
       "5392      Twentieth Century Fox    162.0  \n",
       "7389             Marvel Studios    181.0  \n",
       "2993      Twentieth Century Fox    194.0  \n",
       "6607                  Lucasfilm    138.0  \n",
       "7188             Marvel Studios    149.0  \n",
       "...                         ...      ...  \n",
       "7607                        nan     90.0  \n",
       "7608  Cactus Blue Entertainment     90.0  \n",
       "7609           Embi Productions      NaN  \n",
       "7610                        nan    120.0  \n",
       "7611                PK 65 Films    102.0  \n",
       "\n",
       "[7612 rows x 15 columns]"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Sort the 'gross' from the descending value\n",
    "\n",
    "df = df.sort_values(['gross'], ascending=False)\n",
    "\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From above data, maybe we can say that parameter that can affect the increasing value of gross are:\n",
    "* budget\n",
    "* company\n",
    "\n",
    "Now let's have a look our hypotesis by visualisation all the parameter "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Check Correlation Gross and Budget"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "execution": {
     "iopub.status.busy": "2023-04-06T04:33:01.230990Z",
     "iopub.status.idle": "2023-04-06T04:33:01.235022Z",
     "shell.execute_reply": "2023-04-06T04:33:01.234767Z",
     "shell.execute_reply.started": "2023-04-06T04:33:01.234739Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='budget', ylabel='gross'>"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "df['budget'] = pd.to_numeric(df['budget'], errors = 'coerce')\n",
    "df['gross'] = pd.to_numeric(df['gross'], errors = 'coerce')\n",
    "df = df.dropna()\n",
    "\n",
    "my_palette = sns.color_palette('Set2')\n",
    "sns.set_palette(my_palette)\n",
    "\n",
    "sns.regplot(x = 'budget', y = 'gross', data = df, line_kws = {'color' : 'C1'})\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By the picture, we can know that budget is affect the increasing value of gross. So our hypothesis is correct. \n",
    "\n",
    "But we need to know the value and check again if there any parameter that most affect than the budget for the gross."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "execution": {
     "iopub.status.busy": "2023-04-06T04:33:01.236903Z",
     "iopub.status.idle": "2023-04-06T04:33:01.237991Z",
     "shell.execute_reply": "2023-04-06T04:33:01.237699Z",
     "shell.execute_reply.started": "2023-04-06T04:33:01.237668Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>score</th>\n",
       "      <th>votes</th>\n",
       "      <th>budget</th>\n",
       "      <th>gross</th>\n",
       "      <th>runtime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>year</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.055855</td>\n",
       "      <td>0.204898</td>\n",
       "      <td>0.326655</td>\n",
       "      <td>0.273472</td>\n",
       "      <td>0.074705</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>score</th>\n",
       "      <td>0.055855</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.474759</td>\n",
       "      <td>0.071983</td>\n",
       "      <td>0.222744</td>\n",
       "      <td>0.414729</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>votes</th>\n",
       "      <td>0.204898</td>\n",
       "      <td>0.474759</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.439217</td>\n",
       "      <td>0.614501</td>\n",
       "      <td>0.352379</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>budget</th>\n",
       "      <td>0.326655</td>\n",
       "      <td>0.071983</td>\n",
       "      <td>0.439217</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.740076</td>\n",
       "      <td>0.318538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gross</th>\n",
       "      <td>0.273472</td>\n",
       "      <td>0.222744</td>\n",
       "      <td>0.614501</td>\n",
       "      <td>0.740076</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.275776</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>runtime</th>\n",
       "      <td>0.074705</td>\n",
       "      <td>0.414729</td>\n",
       "      <td>0.352379</td>\n",
       "      <td>0.318538</td>\n",
       "      <td>0.275776</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             year     score     votes    budget     gross   runtime\n",
       "year     1.000000  0.055855  0.204898  0.326655  0.273472  0.074705\n",
       "score    0.055855  1.000000  0.474759  0.071983  0.222744  0.414729\n",
       "votes    0.204898  0.474759  1.000000  0.439217  0.614501  0.352379\n",
       "budget   0.326655  0.071983  0.439217  1.000000  0.740076  0.318538\n",
       "gross    0.273472  0.222744  0.614501  0.740076  1.000000  0.275776\n",
       "runtime  0.074705  0.414729  0.352379  0.318538  0.275776  1.000000"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#corr is formula to show the linear correlation in 2 variabel by column \n",
    "# 1 mean positive correlation\n",
    "# -1 mean negative correlation\n",
    "\n",
    "df.corr(method = 'pearson')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "from the column, we can see that budget is true correlated to affect increasing the gross (0.7)\n",
    "\n",
    "Now we visualising correlation the parameter to each other. Every cell indicated how srong the correlation of two parameters. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "execution": {
     "iopub.status.busy": "2023-04-06T04:33:01.246133Z",
     "iopub.status.idle": "2023-04-06T04:33:01.247232Z",
     "shell.execute_reply": "2023-04-06T04:33:01.246915Z",
     "shell.execute_reply.started": "2023-04-06T04:33:01.246876Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Visualising correlation the parameter to each other\n",
    "\n",
    "correlation_matrix = df.corr(method = 'pearson')\n",
    "\n",
    "sns.set_theme(style=\"white\")\n",
    "\n",
    "sns.heatmap(correlation_matrix, annot = True, cmap = 'Blues', fmt = '.1g')\n",
    "\n",
    "plt.title('Correlation Matrix for Numeric Features')\n",
    "\n",
    "plt.xlabel('Movie Features')\n",
    "\n",
    "plt.ylabel('Movie Features')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Check Correlation Gross VS Company"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "execution": {
     "iopub.status.busy": "2023-04-06T04:33:01.248779Z",
     "iopub.status.idle": "2023-04-06T04:33:01.249682Z",
     "shell.execute_reply": "2023-04-06T04:33:01.249387Z",
     "shell.execute_reply.started": "2023-04-06T04:33:01.249356Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>rating</th>\n",
       "      <th>genre</th>\n",
       "      <th>year</th>\n",
       "      <th>released</th>\n",
       "      <th>score</th>\n",
       "      <th>votes</th>\n",
       "      <th>director</th>\n",
       "      <th>writer</th>\n",
       "      <th>star</th>\n",
       "      <th>country</th>\n",
       "      <th>budget</th>\n",
       "      <th>gross</th>\n",
       "      <th>company</th>\n",
       "      <th>runtime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5392</th>\n",
       "      <td>Avatar</td>\n",
       "      <td>PG-13</td>\n",
       "      <td>Action</td>\n",
       "      <td>2009</td>\n",
       "      <td>18/12/2009</td>\n",
       "      <td>7.8</td>\n",
       "      <td>1100000.0</td>\n",
       "      <td>James Cameron</td>\n",
       "      <td>James Cameron</td>\n",
       "      <td>Sam Worthington</td>\n",
       "      <td>United States</td>\n",
       "      <td>237000000.0</td>\n",
       "      <td>2.847246e+09</td>\n",
       "      <td>Twentieth Century Fox</td>\n",
       "      <td>162.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7389</th>\n",
       "      <td>Avengers: Endgame</td>\n",
       "      <td>PG-13</td>\n",
       "      <td>Action</td>\n",
       "      <td>2019</td>\n",
       "      <td>26/04/2019</td>\n",
       "      <td>8.4</td>\n",
       "      <td>903000.0</td>\n",
       "      <td>Anthony Russo</td>\n",
       "      <td>Christopher Markus</td>\n",
       "      <td>Robert Downey Jr.</td>\n",
       "      <td>United States</td>\n",
       "      <td>356000000.0</td>\n",
       "      <td>2.797501e+09</td>\n",
       "      <td>Marvel Studios</td>\n",
       "      <td>181.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2993</th>\n",
       "      <td>Titanic</td>\n",
       "      <td>PG-13</td>\n",
       "      <td>Drama</td>\n",
       "      <td>1997</td>\n",
       "      <td>19/12/1997</td>\n",
       "      <td>7.8</td>\n",
       "      <td>1100000.0</td>\n",
       "      <td>James Cameron</td>\n",
       "      <td>James Cameron</td>\n",
       "      <td>Leonardo DiCaprio</td>\n",
       "      <td>United States</td>\n",
       "      <td>200000000.0</td>\n",
       "      <td>2.201647e+09</td>\n",
       "      <td>Twentieth Century Fox</td>\n",
       "      <td>194.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6607</th>\n",
       "      <td>Star Wars: Episode VII - The Force Awakens</td>\n",
       "      <td>PG-13</td>\n",
       "      <td>Action</td>\n",
       "      <td>2015</td>\n",
       "      <td>18/12/2015</td>\n",
       "      <td>7.8</td>\n",
       "      <td>876000.0</td>\n",
       "      <td>J.J. Abrams</td>\n",
       "      <td>Lawrence Kasdan</td>\n",
       "      <td>Daisy Ridley</td>\n",
       "      <td>United States</td>\n",
       "      <td>245000000.0</td>\n",
       "      <td>2.069522e+09</td>\n",
       "      <td>Lucasfilm</td>\n",
       "      <td>138.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7188</th>\n",
       "      <td>Avengers: Infinity War</td>\n",
       "      <td>PG-13</td>\n",
       "      <td>Action</td>\n",
       "      <td>2018</td>\n",
       "      <td>27/04/2018</td>\n",
       "      <td>8.4</td>\n",
       "      <td>897000.0</td>\n",
       "      <td>Anthony Russo</td>\n",
       "      <td>Christopher Markus</td>\n",
       "      <td>Robert Downey Jr.</td>\n",
       "      <td>United States</td>\n",
       "      <td>321000000.0</td>\n",
       "      <td>2.048360e+09</td>\n",
       "      <td>Marvel Studios</td>\n",
       "      <td>149.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                            name rating   genre  year  \\\n",
       "5392                                      Avatar  PG-13  Action  2009   \n",
       "7389                           Avengers: Endgame  PG-13  Action  2019   \n",
       "2993                                     Titanic  PG-13   Drama  1997   \n",
       "6607  Star Wars: Episode VII - The Force Awakens  PG-13  Action  2015   \n",
       "7188                      Avengers: Infinity War  PG-13  Action  2018   \n",
       "\n",
       "        released  score      votes       director              writer  \\\n",
       "5392  18/12/2009    7.8  1100000.0  James Cameron       James Cameron   \n",
       "7389  26/04/2019    8.4   903000.0  Anthony Russo  Christopher Markus   \n",
       "2993  19/12/1997    7.8  1100000.0  James Cameron       James Cameron   \n",
       "6607  18/12/2015    7.8   876000.0    J.J. Abrams     Lawrence Kasdan   \n",
       "7188  27/04/2018    8.4   897000.0  Anthony Russo  Christopher Markus   \n",
       "\n",
       "                   star        country       budget         gross  \\\n",
       "5392    Sam Worthington  United States  237000000.0  2.847246e+09   \n",
       "7389  Robert Downey Jr.  United States  356000000.0  2.797501e+09   \n",
       "2993  Leonardo DiCaprio  United States  200000000.0  2.201647e+09   \n",
       "6607       Daisy Ridley  United States  245000000.0  2.069522e+09   \n",
       "7188  Robert Downey Jr.  United States  321000000.0  2.048360e+09   \n",
       "\n",
       "                    company  runtime  \n",
       "5392  Twentieth Century Fox    162.0  \n",
       "7389         Marvel Studios    181.0  \n",
       "2993  Twentieth Century Fox    194.0  \n",
       "6607              Lucasfilm    138.0  \n",
       "7188         Marvel Studios    149.0  "
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The company column has a string data type. It's difficult to do if we want to sort or visualising it. \n",
    "\n",
    "So we must to change the data type from string into numeric. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "execution": {
     "iopub.status.busy": "2023-04-06T04:33:01.251323Z",
     "iopub.status.idle": "2023-04-06T04:33:01.252284Z",
     "shell.execute_reply": "2023-04-06T04:33:01.252014Z",
     "shell.execute_reply.started": "2023-04-06T04:33:01.251985Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>rating</th>\n",
       "      <th>genre</th>\n",
       "      <th>year</th>\n",
       "      <th>released</th>\n",
       "      <th>score</th>\n",
       "      <th>votes</th>\n",
       "      <th>director</th>\n",
       "      <th>writer</th>\n",
       "      <th>star</th>\n",
       "      <th>country</th>\n",
       "      <th>budget</th>\n",
       "      <th>gross</th>\n",
       "      <th>company</th>\n",
       "      <th>runtime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5392</th>\n",
       "      <td>386</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>2009</td>\n",
       "      <td>1386</td>\n",
       "      <td>7.8</td>\n",
       "      <td>1100000.0</td>\n",
       "      <td>782</td>\n",
       "      <td>1260</td>\n",
       "      <td>1528</td>\n",
       "      <td>47</td>\n",
       "      <td>237000000.0</td>\n",
       "      <td>2.847246e+09</td>\n",
       "      <td>1377</td>\n",
       "      <td>162.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7389</th>\n",
       "      <td>388</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>2019</td>\n",
       "      <td>2005</td>\n",
       "      <td>8.4</td>\n",
       "      <td>903000.0</td>\n",
       "      <td>105</td>\n",
       "      <td>510</td>\n",
       "      <td>1464</td>\n",
       "      <td>47</td>\n",
       "      <td>356000000.0</td>\n",
       "      <td>2.797501e+09</td>\n",
       "      <td>979</td>\n",
       "      <td>181.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2993</th>\n",
       "      <td>4898</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>1997</td>\n",
       "      <td>1464</td>\n",
       "      <td>7.8</td>\n",
       "      <td>1100000.0</td>\n",
       "      <td>782</td>\n",
       "      <td>1260</td>\n",
       "      <td>1068</td>\n",
       "      <td>47</td>\n",
       "      <td>200000000.0</td>\n",
       "      <td>2.201647e+09</td>\n",
       "      <td>1377</td>\n",
       "      <td>194.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6607</th>\n",
       "      <td>3634</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>2015</td>\n",
       "      <td>1388</td>\n",
       "      <td>7.8</td>\n",
       "      <td>876000.0</td>\n",
       "      <td>766</td>\n",
       "      <td>1803</td>\n",
       "      <td>355</td>\n",
       "      <td>47</td>\n",
       "      <td>245000000.0</td>\n",
       "      <td>2.069522e+09</td>\n",
       "      <td>941</td>\n",
       "      <td>138.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7188</th>\n",
       "      <td>389</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>2018</td>\n",
       "      <td>2085</td>\n",
       "      <td>8.4</td>\n",
       "      <td>897000.0</td>\n",
       "      <td>105</td>\n",
       "      <td>510</td>\n",
       "      <td>1464</td>\n",
       "      <td>47</td>\n",
       "      <td>321000000.0</td>\n",
       "      <td>2.048360e+09</td>\n",
       "      <td>979</td>\n",
       "      <td>149.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5587</th>\n",
       "      <td>3784</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>2009</td>\n",
       "      <td>1073</td>\n",
       "      <td>5.8</td>\n",
       "      <td>3500.0</td>\n",
       "      <td>584</td>\n",
       "      <td>2920</td>\n",
       "      <td>1492</td>\n",
       "      <td>47</td>\n",
       "      <td>3000000.0</td>\n",
       "      <td>5.073000e+03</td>\n",
       "      <td>1380</td>\n",
       "      <td>96.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2384</th>\n",
       "      <td>2960</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1993</td>\n",
       "      <td>253</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1900.0</td>\n",
       "      <td>1804</td>\n",
       "      <td>3097</td>\n",
       "      <td>185</td>\n",
       "      <td>47</td>\n",
       "      <td>5000000.0</td>\n",
       "      <td>2.970000e+03</td>\n",
       "      <td>1371</td>\n",
       "      <td>97.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3628</th>\n",
       "      <td>1589</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>2000</td>\n",
       "      <td>780</td>\n",
       "      <td>6.8</td>\n",
       "      <td>43000.0</td>\n",
       "      <td>949</td>\n",
       "      <td>1680</td>\n",
       "      <td>525</td>\n",
       "      <td>6</td>\n",
       "      <td>5000000.0</td>\n",
       "      <td>2.554000e+03</td>\n",
       "      <td>463</td>\n",
       "      <td>108.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>270</th>\n",
       "      <td>2900</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>1982</td>\n",
       "      <td>846</td>\n",
       "      <td>3.9</td>\n",
       "      <td>2300.0</td>\n",
       "      <td>261</td>\n",
       "      <td>54</td>\n",
       "      <td>1467</td>\n",
       "      <td>47</td>\n",
       "      <td>800000.0</td>\n",
       "      <td>2.270000e+03</td>\n",
       "      <td>579</td>\n",
       "      <td>85.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3151</th>\n",
       "      <td>4955</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>1997</td>\n",
       "      <td>69</td>\n",
       "      <td>5.7</td>\n",
       "      <td>5800.0</td>\n",
       "      <td>649</td>\n",
       "      <td>158</td>\n",
       "      <td>1805</td>\n",
       "      <td>47</td>\n",
       "      <td>15000000.0</td>\n",
       "      <td>3.090000e+02</td>\n",
       "      <td>501</td>\n",
       "      <td>85.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5410 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      name  rating  genre  year  released  score      votes  director  writer  \\\n",
       "5392   386       5      0  2009      1386    7.8  1100000.0       782    1260   \n",
       "7389   388       5      0  2019      2005    8.4   903000.0       105     510   \n",
       "2993  4898       5      6  1997      1464    7.8  1100000.0       782    1260   \n",
       "6607  3634       5      0  2015      1388    7.8   876000.0       766    1803   \n",
       "7188   389       5      0  2018      2085    8.4   897000.0       105     510   \n",
       "...    ...     ...    ...   ...       ...    ...        ...       ...     ...   \n",
       "5587  3784       6      6  2009      1073    5.8     3500.0       584    2920   \n",
       "2384  2960       5      0  1993       253    4.5     1900.0      1804    3097   \n",
       "3628  1589       3      6  2000       780    6.8    43000.0       949    1680   \n",
       "270   2900       6      9  1982       846    3.9     2300.0       261      54   \n",
       "3151  4955       5      4  1997        69    5.7     5800.0       649     158   \n",
       "\n",
       "      star  country       budget         gross  company  runtime  \n",
       "5392  1528       47  237000000.0  2.847246e+09     1377    162.0  \n",
       "7389  1464       47  356000000.0  2.797501e+09      979    181.0  \n",
       "2993  1068       47  200000000.0  2.201647e+09     1377    194.0  \n",
       "6607   355       47  245000000.0  2.069522e+09      941    138.0  \n",
       "7188  1464       47  321000000.0  2.048360e+09      979    149.0  \n",
       "...    ...      ...          ...           ...      ...      ...  \n",
       "5587  1492       47    3000000.0  5.073000e+03     1380     96.0  \n",
       "2384   185       47    5000000.0  2.970000e+03     1371     97.0  \n",
       "3628   525        6    5000000.0  2.554000e+03      463    108.0  \n",
       "270   1467       47     800000.0  2.270000e+03      579     85.0  \n",
       "3151  1805       47   15000000.0  3.090000e+02      501     85.0  \n",
       "\n",
       "[5410 rows x 15 columns]"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_numerized = df.copy()\n",
    "\n",
    "for col_name in df.select_dtypes(include = ['object']).columns: \n",
    "    df_numerized[col_name] = df_numerized[col_name].astype('category')\n",
    "    df_numerized[col_name] = df_numerized[col_name].cat.codes\n",
    "        \n",
    "df_numerized    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we do the same thing as budget affect gross to this parameter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "execution": {
     "iopub.status.busy": "2023-04-06T04:33:01.254546Z",
     "iopub.status.idle": "2023-04-06T04:33:01.255439Z",
     "shell.execute_reply": "2023-04-06T04:33:01.255192Z",
     "shell.execute_reply.started": "2023-04-06T04:33:01.255165Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1400x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (14,8))\n",
    "\n",
    "sns.set_theme(style = 'white')\n",
    "\n",
    "correlation_matrix = df_numerized.corr()\n",
    "\n",
    "sns.heatmap(correlation_matrix, annot = True, cmap = 'Blues', fmt = '.1g')\n",
    "\n",
    "plt.title('Correlation Matrix for Numeric Features')\n",
    "\n",
    "plt.xlabel('Movie Features')\n",
    "\n",
    "plt.ylabel('Movie Features')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By the pictures, we can simply coclude that gross is high correlated with:\n",
    "* budget (0.71)\n",
    "* votes (0.63)\n",
    "\n",
    "Okey, let's check them again without visualisation\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "execution": {
     "iopub.status.busy": "2023-04-06T04:33:01.263439Z",
     "iopub.status.idle": "2023-04-06T04:33:01.264402Z",
     "shell.execute_reply": "2023-04-06T04:33:01.264128Z",
     "shell.execute_reply.started": "2023-04-06T04:33:01.264086Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "name     name        1.000000\n",
       "         rating     -0.029285\n",
       "         genre       0.010943\n",
       "         year        0.024431\n",
       "         released    0.010243\n",
       "                       ...   \n",
       "runtime  country    -0.035624\n",
       "         budget      0.318538\n",
       "         gross       0.275776\n",
       "         company     0.036362\n",
       "         runtime     1.000000\n",
       "Length: 225, dtype: float64"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#short the correlation\n",
    "correlation_mat = df_numerized.corr()\n",
    "corr_pairs = correlation_mat.unstack()\n",
    "corr_pairs\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "execution": {
     "iopub.status.busy": "2023-04-06T04:33:01.266153Z",
     "iopub.status.idle": "2023-04-06T04:33:01.267251Z",
     "shell.execute_reply": "2023-04-06T04:33:01.266941Z",
     "shell.execute_reply.started": "2023-04-06T04:33:01.266908Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "genre    budget    -0.367921\n",
       "budget   genre     -0.367921\n",
       "gross    genre     -0.243392\n",
       "genre    gross     -0.243392\n",
       "rating   budget    -0.203238\n",
       "                      ...   \n",
       "year     year       1.000000\n",
       "genre    genre      1.000000\n",
       "rating   rating     1.000000\n",
       "company  company    1.000000\n",
       "runtime  runtime    1.000000\n",
       "Length: 225, dtype: float64"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted_pairs = corr_pairs.sort_values()\n",
    "\n",
    "sorted_pairs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "execution": {
     "iopub.status.busy": "2023-04-06T04:33:01.268966Z",
     "iopub.status.idle": "2023-04-06T04:33:01.269941Z",
     "shell.execute_reply": "2023-04-06T04:33:01.269682Z",
     "shell.execute_reply.started": "2023-04-06T04:33:01.269649Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "gross   votes     0.614501\n",
       "votes   gross     0.614501\n",
       "budget  gross     0.740076\n",
       "gross   budget    0.740076\n",
       "dtype: float64"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#short correlation with condition the value <0.5 and not equal 1\n",
    "high_corr = sorted_pairs[(sorted_pairs > 0.5) & (sorted_pairs != 1)]\n",
    "\n",
    "high_corr "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bagaimana korelasi/hubungan budget dan pendapatan?\n",
    "Budget dalam pembuatan film memiliki hubungan berbanding lurus dengan peningkatan pendapatan yang dihasilkan. Bisa dikatakan, bduget semakin besar maka pendapatan(gross) yang dihasilkan juga akan semakin tinggi. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Apakah company/perusahaan memengaruhi pendapatan?\n",
    "Perusahaan hanya memiliki pengaruh 0.1 terhadap gross(pendapatan). Bisa dikatakan bahwa perusahaan tidak terlalu memengaruhi besarnya pendapatan.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Apakah votes memengaruhi pendapatan? Seberapa besar?\n",
    "Votes memiliki korelasi sebesar 0.6 untuk pendapatan. Votes semakin tinggi memperlihatkan bahwa pendapatan yang dihasilkan juga akan semakin besar. Bisa jadi karena votes menandakan seberapa tinggi/bagus kualitas dari film tersebut. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hal apa saja yang memengaruhi pendapatan tinggi?\n",
    "Yang memengaruhi pendapatan (gross) adalah :\n",
    "* Budget\n",
    "* Votes"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
